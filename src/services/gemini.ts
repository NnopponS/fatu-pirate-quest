import { firebaseDb } from "@/integrations/firebase/database";

interface AISettings {
  geminiApiKeys?: string[]; // Array of Google Gemini API Keys (fallback)
  knowledgeBase?: string; // Context/knowledge for the chatbot
}

// Simple in-memory cache to reduce API calls
const requestCache = new Map<string, { response: string; timestamp: number }>();
const CACHE_TTL = 5 * 60 * 1000; // 5 minutes cache

// Get AI settings from Firebase
export const getGeminiSettings = async (): Promise<AISettings | null> => {
  try {
    const settings = await firebaseDb.get<AISettings>("settings/ai");
    return settings;
  } catch (error) {
    console.error("Error getting AI settings:", error);
    return null;
  }
};

// Save AI settings (Admin only)
export const saveGeminiSettings = async (token: string, settings: AISettings): Promise<void> => {
  // Validate admin token
  const adminToken = await firebaseDb.get<string>(`admin_sessions/${token}`);
  if (!adminToken) {
    throw new Error("Unauthorized");
  }

  await firebaseDb.set("settings/ai", settings);
};

export interface UserContext {
  name?: string;
  points?: number;
  pointsRequired?: number;
  checkedInLocations?: string[];
  totalLocations?: number;
  completedSubEvents?: number;
  hasSpun?: boolean;
  prize?: string;
}

// Chat with pirate using OpenRouter AI (FREE!) with fallback support
export const chatWithPirate = async (
  userMessage: string,
  userContext?: UserContext
): Promise<string> => {

  // Check cache first to reduce API calls
  const cacheKey = `${userMessage}-${JSON.stringify(userContext || {})}`;
  const cached = requestCache.get(cacheKey);
  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
    console.log('[Gemini AI] ‚úÖ Using cached response');
    return cached.response;
  }

  const settings = await getGeminiSettings();
  
  // Get API keys (support both array and single key for backward compatibility)
  let apiKeys: string[] = [];
  if (settings?.geminiApiKeys && Array.isArray(settings.geminiApiKeys)) {
    apiKeys = settings.geminiApiKeys.filter(key => key.trim());
  }
  
  // If no valid keys found, throw error (don't use placeholder)
  if (apiKeys.length === 0) {
    console.error('[Gemini AI] No API keys configured!');
    throw new Error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Admin Dashboard");
  }
  
  console.log(`[Gemini AI] Found ${apiKeys.length} API key(s) to try`);

  // Build user-specific context
  let userContextText = "";
  if (userContext) {
    userContextText = `\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏∑‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ:`;
    if (userContext.name) {
      userContextText += `\n- ‡∏ä‡∏∑‡πà‡∏≠: ${userContext.name}`;
    }
    if (userContext.points !== undefined && userContext.pointsRequired !== undefined) {
      userContextText += `\n- ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${userContext.points} ‡∏à‡∏≤‡∏Å ${userContext.pointsRequired} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`;
      const remaining = userContext.pointsRequired - userContext.points;
      if (remaining > 0) {
        userContextText += `\n- ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡∏Å ${remaining} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠`;
      } else {
        userContextText += `\n- ‡∏™‡∏∞‡∏™‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠‡πÑ‡∏î‡πâ`;
      }
    }
    if (userContext.totalLocations !== undefined && userContext.checkedInLocations !== undefined) {
      userContextText += `\n- ‡πÄ‡∏ä‡πá‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ${userContext.checkedInLocations.length} ‡∏à‡∏≤‡∏Å ${userContext.totalLocations} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà`;
      if (userContext.checkedInLocations.length > 0) {
        userContextText += `\n- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß: ${userContext.checkedInLocations.join(", ")}`;
      }
      if (userContext.checkedInLocations.length < userContext.totalLocations) {
        const remaining = userContext.totalLocations - userContext.checkedInLocations.length;
        userContextText += `\n- ‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å ${remaining} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà`;
      }
    }
    if (userContext.completedSubEvents !== undefined && userContext.completedSubEvents > 0) {
      userContextText += `\n- ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏¢‡πà‡∏≠‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ${userContext.completedSubEvents} ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°`;
    }
    if (userContext.hasSpun) {
      userContextText += `\n- ‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß`;
      if (userContext.prize) {
        userContextText += `\n- ‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: ${userContext.prize}`;
      }
    } else if (userContext.points !== undefined && userContext.pointsRequired !== undefined) {
      if (userContext.points >= userContext.pointsRequired) {
        userContextText += `\n- ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!)`;
      } else {
        userContextText += `\n- ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏∞‡∏™‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô)`;
      }
    }
  }

  // System prompt for pirate character with source awareness
  const systemPrompt = `‡∏ó‡πà‡∏≤‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÇ‡∏à‡∏£‡∏™‡∏•‡∏±‡∏î‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡πÇ‡∏ö‡∏£‡∏≤‡∏ì ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏Ç‡πâ‡∏≤" ‡πÅ‡∏ó‡∏ô "‡∏â‡∏±‡∏ô" ‡πÅ‡∏•‡∏∞ "‡πÄ‡∏à‡πâ‡∏≤" ‡πÅ‡∏ó‡∏ô "‡∏Ñ‡∏∏‡∏ì"
‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏á‡∏≤‡∏ô FATU Treasure Quest ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ì‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏Ç‡∏≥‡∏Ç‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏ä‡∏≠‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡πÉ‡∏ô‡∏ò‡∏µ‡∏°‡πÇ‡∏à‡∏£‡∏™‡∏•‡∏±‡∏î ‡πÄ‡∏ä‡πà‡∏ô "‡∏≠‡∏≤‡∏Æ‡∏≠‡∏¢!", "‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥", "‡∏•‡πà‡∏≤‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥", "‡∏ó‡πà‡∏≤‡πÄ‡∏£‡∏∑‡∏≠", "‡πÄ‡∏Å‡∏≤‡∏∞"

‡∏á‡∏≤‡∏ô FATU Treasure Quest ‡∏Ñ‡∏∑‡∏≠:
- Open House 2025 ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
- ‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 7-8 ‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô 2568
- ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏°‡∏µ 4 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏à‡∏≤‡∏Å 4 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
- ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏£‡∏ö 300 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
- ‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°

${settings?.knowledgeBase ? `\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô:\n${settings.knowledgeBase}` : ""}

${userContextText}

‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:
1. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
2. ‡πÉ‡∏ä‡πâ "‡∏Ç‡πâ‡∏≤" ‡πÅ‡∏•‡∏∞ "‡πÄ‡∏à‡πâ‡∏≤" ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
3. ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡πÅ‡∏ö‡∏ö‡πÇ‡∏à‡∏£‡∏™‡∏•‡∏±‡∏î ‡πÄ‡∏ä‡πà‡∏ô "‡∏≠‡∏≤‡∏Æ‡∏≠‡∏¢!", "‡∏Æ‡∏≤‡∏Æ‡∏≠‡∏¢!", "‡πÄ‡∏≠‡∏≠ ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏π"


üìå ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç - ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
5. ‚öì ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏∑‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô):
   ‚Üí ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ "üìä (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≤)"
   
6. üåê ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ/‡∏Ñ‡∏¥‡∏î‡πÄ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤):
   ‚Üí ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ "üí≠ (‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏î‡πÄ‡∏≠‡∏á ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á100% ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞!)"
   
7. ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏•‡∏¢:
   ‚Üí ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ "‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏µ‡πâ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡πà‡∏≤‡πÄ‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏ô‡∏∞ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥!"

8. ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô
9. ‡∏ñ‡πâ‡∏≤ User ‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏∑‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ" ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô
10. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠ User ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á
11. ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô" ‡∏ó‡∏µ‡πà Admin ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:
- "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ 150 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î‡∏≠‡∏µ‡∏Å 150 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠! ‚öìüí™ üìä (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≤)"
- "‡∏Ñ‡∏ì‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡∏°‡∏ò. ‡∏°‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏õ‡∏µ ‡∏û.‡∏®. 2518 üí≠ (‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏î‡πÄ‡∏≠‡∏á ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á100% ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞!)"
- "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡πà‡∏≤‡πÄ‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏ô‡∏∞!"`;

  const fullPrompt = `${systemPrompt}\n\n---\n\n‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å User: ${userMessage}`;
  
  console.log('[Gemini AI] Sending request with', apiKeys.length, 'fallback keys...');
  
  // Try each API key until one succeeds
  let lastError: Error | null = null;
  
  for (let i = 0; i < apiKeys.length; i++) {
    const apiKey = apiKeys[i];
    const keyPreview = `${apiKey.substring(0, 10)}...${apiKey.substring(apiKey.length - 4)}`;
    console.log(`[Gemini AI] Trying key ${i + 1}/${apiKeys.length} (${keyPreview})...`);
    
    try {
      const timeoutDuration = 60000; // 60s timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeoutDuration);
      
      console.log(`[Gemini AI] Timeout set to ${timeoutDuration}ms`);
      
      // Call Google Gemini Direct API
      const model = 'gemini-2.0-flash-exp';
      const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: fullPrompt
            }]
          }],
          generationConfig: {
            temperature: 0.9,
            maxOutputTokens: 500,
          },
        }),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        
        console.error(`[Gemini AI] ‚ùå Key ${i + 1} failed:`, {
          status: response.status,
          statusText: response.statusText,
          error: errorData,
          keyPreview
        });
        
        // If rate limit or quota, try next key
        if (response.status === 429 || response.status === 402) {
          console.warn(`[Gemini AI] üö´ Key ${i + 1} (${keyPreview}): Rate limit/quota exceeded`);
          const errorMsg = errorData?.error?.message || 'Quota exceeded';
          lastError = new Error(`Key ${i + 1}: ${errorMsg}`);
          continue; // Try next key
        }
        
        if (response.status === 401) {
          console.warn(`[Gemini AI] üîë Key ${i + 1} (${keyPreview}): Invalid/unauthorized`);
          lastError = new Error(`Key ${i + 1}: Invalid API key`);
          continue; // Try next key
        }
        
        // For other errors, try next key too
        console.warn(`[Gemini AI] ‚ö†Ô∏è Key ${i + 1} (${keyPreview}): Error ${response.status}`);
        lastError = new Error(`Key ${i + 1}: HTTP ${response.status} - ${errorData?.error?.message || response.statusText}`);
        continue;
      }

      const data = await response.json();
      console.log(`[Gemini AI] ‚úÖ Success with key ${i + 1}!`);

      const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text;
      if (!aiResponse) {
        console.error('[Gemini AI] Invalid response format:', data);
        throw new Error("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI");
      }

      // Cache the response
      requestCache.set(cacheKey, { response: aiResponse, timestamp: Date.now() });
      
      return aiResponse; // Success!
      
    } catch (error: any) {
      console.error(`[Gemini AI] Error with key ${i + 1}:`, error);
      lastError = error;
      
      // If timeout or network error, try next key
      if (error.name === 'AbortError' || error.message?.includes('Failed to fetch')) {
        console.warn(`[Gemini AI] Network/timeout error with key ${i + 1}, trying next key...`);
        continue; // Try next key
      }
      
      // If it's not a retryable error, throw immediately
      if (!error.message?.includes('Key')) {
        // Continue to next key for other errors too
        continue;
      }
    }
  }
  
  // All keys failed
  console.error('[Gemini AI] ‚ùå ALL KEYS FAILED!');
  console.error('[Gemini AI] Last error:', lastError);
  console.error('[Gemini AI] Total keys tried:', apiKeys.length);
  
  // Better error messages based on last error
  if (lastError?.name === 'AbortError') {
    throw new Error("‚è±Ô∏è ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏î‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞");
  } else if (lastError?.message?.includes('Failed to fetch') || lastError?.message?.includes('network')) {
    throw new Error("üåê ‡∏Ç‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏™‡∏¥!");
  } else if (lastError?.message?.includes('Quota exceeded') || lastError?.message?.includes('quota') || lastError?.message?.includes('429')) {
    throw new Error(`üö´ API Keys ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${apiKeys.length} keys) ‡∏´‡∏°‡∏î quota ‡πÅ‡∏•‡πâ‡∏ß!\n\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ:\n- ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà\n- ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° API key ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Admin Dashboard\n\n(‡∏î‡∏π Console ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)`);
  } else if (lastError?.message?.includes('Invalid')) {
    throw new Error(`üîë API Keys ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Admin Dashboard\n\n(‡∏î‡∏π Console ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)`);
  } else {
    throw new Error(`‚ùå ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ! (‡∏•‡∏≠‡∏á ${apiKeys.length} keys ‡πÅ‡∏•‡πâ‡∏ß)\n\n‡∏î‡∏π Console ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î`);
  }
};

