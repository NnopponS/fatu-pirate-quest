import { useCallback, useEffect, useMemo, useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  createPrize as createPrizeApi,
  deletePrize as deletePrizeApi,
  getDashboardData,
  invalidateAdminSession,
  savePrize as savePrizeApi,
  setSpinThreshold as setSpinThresholdApi,
  updateLocation as updateLocationApi,
  regenerateLocationQR as regenerateLocationQRApi,
  deleteParticipant as deleteParticipantApi,
  updateParticipant as updateParticipantApi,
  getHeroCards,
  createHeroCard,
  saveHeroCard,
  deleteHeroCard,
  type HeroCardRecord,
} from "@/services/firebase";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/contexts/AuthContext";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  RefreshCw,
  LogOut,
  Download,
  Save,
  Plus,
  Trash2,
  Anchor,
  MapPin,
  Gift,
  Users,
  Layers,
  Search,
  Calendar, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Calendar icon ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sub-events
} from "lucide-react";
import { PirateBackdrop } from "@/components/PirateBackdrop";
import { AdminLocationManager } from "@/components/AdminLocationManager";
import { AdminParticipantManager } from "@/components/AdminParticipantManager";
import { AdminHeroCardManager } from "@/components/AdminHeroCardManager";
import { AdminSubEventManager } from "@/components/AdminSubEventManager";
import { HeroCardsTab } from "@/components/HeroCardsTabContent";
import { supabase } from "@/integrations/supabase/client";

interface ParticipantRow {
  id: string;
  username: string;
  first_name: string;
  last_name: string;
  points: number;
  age: number | null;
  grade_level: string | null;
  school: string | null;
  program: string | null;
  phone_number?: string; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
  created_at: string;
}

interface SpinRow {
  participant_id: string;
  prize: string;
  created_at: string;
}

interface LocationRow {
  id: number;
  name: string;
  lat: number;
  lng: number;
  points: number;
  map_url?: string;
  image_url?: string;
  description?: string;
  qr_code_version?: number;
}

interface PrizeRow {
  id: string;
  name: string;
  weight: number;
  stock: number;
  created_at?: string;
}

interface DashboardResponse {
  ok: boolean;
  participants: ParticipantRow[];
  locations: LocationRow[];
  prizes: PrizeRow[];
  spins: SpinRow[]; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
  settings: {
    pointsRequiredForWheel: number;
  };
}

const errorMessage = (error: unknown) =>
  error instanceof Error ? error.message : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏";

const AdminDashboard = () => {
  const navigate = useNavigate();
  const { toast } = useToast();

  const [loading, setLoading] = useState(true);
  const [token, setToken] = useState<string | null>(null);
  const [dashboard, setDashboard] = useState<DashboardResponse | null>(null);
  const [locationDrafts, setLocationDrafts] = useState<LocationRow[]>([]);
  const [prizeDrafts, setPrizeDrafts] = useState<PrizeRow[]>([]);
  const [pointsRequired, setPointsRequired] = useState<number>(400);
  const [savingLocationId, setSavingLocationId] = useState<number | null>(null);
  const [savingPrizeId, setSavingPrizeId] = useState<string | null>(null);
  const [newPrize, setNewPrize] = useState({ name: "", weight: "10", stock: "10" });
  const [updatingThreshold, setUpdatingThreshold] = useState(false);
  const [heroCards, setHeroCards] = useState<HeroCardRecord[]>([]);
  const [heroCardDrafts, setHeroCardDrafts] = useState<HeroCardRecord[]>([]);
  const [newHeroCard, setNewHeroCard] = useState({ 
    title: "", 
    description: "", 
    icon: "üéØ",
    order: "1"
  });
  const [searchQuery, setSearchQuery] = useState(""); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° search state

  const adminUsername = useMemo(() => localStorage.getItem("adminUsername") ?? "admin", []);
  const { logout: authLogout } = useAuth();

  const logout = useCallback(() => {
    void invalidateAdminSession(localStorage.getItem("adminToken") ?? "");
    authLogout();
    toast({
      title: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
      description: "‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏£‡∏∑‡∏≠‡πÇ‡∏à‡∏£‡∏™‡∏•‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
    });
    navigate("/login");
  }, [authLogout, navigate, toast]);

  const fetchDashboard = useCallback(
    async (sessionToken: string) => {
      setLoading(true);
      try {
        const data = await getDashboardData(sessionToken);

        setDashboard(data);
        setLocationDrafts(data.locations.map((loc) => ({ ...loc })));
        setPrizeDrafts(data.prizes.map((prize) => ({ ...prize })));
        setPointsRequired(data.settings.pointsRequiredForWheel);
      } catch (error) {
        console.error("Dashboard fetch error:", error);
        const errorMsg = errorMessage(error);
        
        toast({
          title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
          description: errorMsg,
          variant: "destructive",
        });
        
        // Only logout if session is actually invalid
        if (errorMsg.includes("Invalid session") || errorMsg.includes("session")) {
          logout();
        }
      } finally {
        setLoading(false);
      }
    },
    [logout, toast],
  );

  useEffect(() => {
    const sessionToken = localStorage.getItem("adminToken");
    if (!sessionToken) {
      navigate("/login");
      return;
    }
    setToken(sessionToken);
    fetchDashboard(sessionToken);
  }, [fetchDashboard, navigate]);

  const handleLocationChange = (index: number, field: keyof LocationRow, value: string) => {
    setLocationDrafts((prev) => {
      const updated = [...prev];
      const current = { ...updated[index] };

      if (field === "lat" || field === "lng" || field === "points") {
        const numeric = value === "" ? NaN : Number(value);
        current[field] = numeric;
      } else {
        current[field] = value as never;
      }

      updated[index] = current;
      return updated;
    });
  };

  const saveLocation = async (location: LocationRow) => {
    if (!token) return;

    if (!location.name.trim() || Number.isNaN(location.points)) {
      toast({
        title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        description: "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á",
        variant: "destructive",
      });
      return;
    }

    setSavingLocationId(location.id);
    try {
      await updateLocationApi(token, {
        id: location.id,
        name: location.name.trim(),
        points: Number(location.points),
        map_url: location.map_url,
        image_url: location.image_url,
        description: location.description,
      });
      toast({ title: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡πá‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
      fetchDashboard(token);
    } catch (error) {
      toast({
        title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡πá‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: errorMessage(error),
        variant: "destructive",
      });
    } finally {
      setSavingLocationId(null);
    }
  };

  const regenerateQR = async (locationId: number) => {
    if (!token) return;
    
    try {
      await regenerateLocationQRApi(token, locationId);
      toast({ 
        title: "‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: "QR code ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß" 
      });
      fetchDashboard(token);
    } catch (error) {
      toast({
        title: "‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: errorMessage(error),
        variant: "destructive",
      });
    }
  };

  const saveSubEvents = async (locationId: number, subEvents: any[]) => {
    if (!token) return;
    
    try {
      await updateLocationApi(token, {
        id: locationId,
        sub_events: subEvents,
      });
      toast({ title: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏¢‡πà‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
      fetchDashboard(token);
    } catch (error) {
      toast({
        title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏¢‡πà‡∏≠‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: errorMessage(error),
        variant: "destructive",
      });
      throw error;
    }
  };

  const deleteParticipant = async (participantId: string) => {
    if (!token) return;
    
    try {
      await deleteParticipantApi(token, participantId);
      toast({ title: "‡∏•‡∏ö‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
      fetchDashboard(token);
    } catch (error) {
      toast({
        title: "‡∏•‡∏ö‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: errorMessage(error),
        variant: "destructive",
      });
    }
  };

  const updateParticipant = async (participantId: string, updates: Partial<ParticipantRow>) => {
    if (!token) return;
    
    try {
      await updateParticipantApi(token, participantId, updates);
      toast({ title: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
      fetchDashboard(token);
    } catch (error) {
      toast({
        title: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: errorMessage(error),
        variant: "destructive",
      });
    }
  };

  const adjustParticipantPoints = async (participantId: string, delta: number) => {
    if (!token) return;
    
    try {
      // Get current participant data from Firebase
      const participant = dashboard?.participants.find(p => p.id === participantId);
      if (!participant) {
        throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏∑‡∏≠");
      }
      
      // Calculate new points (minimum 0)
      const newPoints = Math.max(0, participant.points + delta);
      
      // Update points using Firebase
      await updateParticipant(participantId, { points: newPoints });
      
      toast({ 
        title: "‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: `${delta > 0 ? '+' : ''}${delta} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏£‡∏ß‡∏°: ${newPoints} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)`
      });
      
      // Refresh dashboard to show updated points
      fetchDashboard(token);
    } catch (error) {
      toast({
        title: "‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: errorMessage(error),
        variant: "destructive",
      });
    }
  };


  const savePrize = async (prize: PrizeRow) => {
    if (!token) return;
    if (!prize.name.trim() || prize.weight <= 0 || prize.stock < 0) {
      toast({
        title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        variant: "destructive",
      });
      return;
    }

    setSavingPrizeId(prize.id);
    try {
      await savePrizeApi(token, {
        id: prize.id,
        name: prize.name.trim(),
        weight: Number(prize.weight),
        stock: Number(prize.stock),
        created_at: prize.created_at || new Date().toISOString(),
      });
      toast({ title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
      fetchDashboard(token);
    } catch (error) {
      toast({
        title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: errorMessage(error),
        variant: "destructive",
      });
    } finally {
      setSavingPrizeId(null);
    }
  };

  const deletePrize = async (id: string) => {
    if (!token) return;
    try {
      await deletePrizeApi(token, id);
      toast({ title: "‡∏•‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
      fetchDashboard(token);
    } catch (error) {
      toast({
        title: "‡∏•‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: errorMessage(error),
        variant: "destructive",
      });
    }
  };

  const addPrize = async () => {
    if (!token) return;

    const trimmedName = newPrize.name.trim();
    const weightValue = Number(newPrize.weight);
    const stockValue = Number(newPrize.stock);
    if (!trimmedName || Number.isNaN(weightValue) || weightValue <= 0 || Number.isNaN(stockValue) || stockValue < 0) {
      toast({
        title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        variant: "destructive",
      });
      return;
    }

    try {
      await createPrizeApi(token, trimmedName, weightValue, stockValue);
      toast({ title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
      setNewPrize({ name: "", weight: "10", stock: "10" });
      fetchDashboard(token);
    } catch (error) {
      toast({
        title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: errorMessage(error),
        variant: "destructive",
      });
    }
  };

  const updateThreshold = async () => {
    if (!token) return;

    if (Number.isNaN(pointsRequired) || pointsRequired < 0) {
      toast({
        title: "Invalid points threshold",
        description: "Please provide a non-negative number for the wheel requirement.",
        variant: "destructive",
      });
      return;
    }

    setUpdatingThreshold(true);
    try {
      await setSpinThresholdApi(token, pointsRequired);
      toast({ title: "Updated spin threshold" });
      fetchDashboard(token);
    } catch (error) {
      toast({
        title: "Unable to update threshold",
        description: errorMessage(error),
        variant: "destructive",
      });
    } finally {
      setUpdatingThreshold(false);
    }
  };

  // ‚úÖ Filter participants ‡∏ï‡∏≤‡∏° search query
  const filteredParticipants = useMemo(() => {
    if (!dashboard) return [];
    if (!searchQuery.trim()) return dashboard.participants;
    
    const query = searchQuery.toLowerCase().trim();
    return dashboard.participants.filter((p) => {
      const fullName = `${p.first_name} ${p.last_name}`.toLowerCase();
      const phone = p.phone_number?.replace(/\D/g, '') || '';
      const queryPhone = query.replace(/\D/g, '');
      
      return (
        fullName.includes(query) ||
        p.first_name.toLowerCase().includes(query) ||
        p.last_name.toLowerCase().includes(query) ||
        p.username.toLowerCase().includes(query) ||
        (phone && queryPhone && phone.includes(queryPhone))
      );
    });
  }, [dashboard, searchQuery]);

  const exportParticipants = () => {
    if (!dashboard) return;

    const header = [
      "ID",
      "Username",
      "‡∏ä‡∏∑‡πà‡∏≠",
      "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•",
      "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
      "‡∏≠‡∏≤‡∏¢‡∏∏",
      "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô",
      "‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
      "‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°",
      "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
      "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
      "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ", // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
      "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠",
    ];

    const rows = dashboard.participants.map((p) => {
      const spin = dashboard.spins.find((s) => s.participant_id === p.id);
      return [
        p.id,
        p.username,
        p.first_name,
        p.last_name,
        String(p.points),
        p.age ? String(p.age) : "",
        p.grade_level ?? "",
        p.school ?? "",
        p.program ?? "",
        p.phone_number ?? "", // ‚úÖ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
        spin ? "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß" : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö", // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        spin ? spin.prize : "-", // ‚úÖ ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
        new Date(p.created_at).toISOString(),
      ];
    });

    const csvContent = [header, ...rows]
      .map((row) =>
        row
          .map((value) => {
            const sanitized = value.replace(/"/g, '""');
            return `"${sanitized}"`;
          })
          .join(","),
      )
      .join("\n");

    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `fatu_participants_${new Date().toISOString().slice(0, 10)}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  if (!token) {
    return null;
  }

  return (
    <PirateBackdrop>
      <div className="container mx-auto max-w-6xl px-4 py-16 space-y-10">
        <div className="flex flex-col items-center gap-4 text-center">
          <span className="pirate-highlight">
            <Anchor className="h-4 w-4 text-primary" />
            ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ú‡∏π‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏£‡∏∑‡∏≠
          </span>
          <h1 className="pirate-heading md:text-5xl">‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Å‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡∏≠ FATU</h1>
          <p className="pirate-subheading">
            ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏∑‡∏≠ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡πá‡∏Å‡∏≠‡∏¥‡∏ô ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏´‡πà‡∏á‡∏ô‡∏µ‡πâ
          </p>
        </div>

        <div className="pirate-card flex flex-col gap-4 px-6 py-6 sm:flex-row sm:items-center sm:justify-between">
          <div className="text-left">
            <p className="text-sm uppercase tracking-wide text-foreground/60">
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏ô‡∏≤‡∏°
            </p>
            <p className="text-lg font-semibold text-primary">{adminUsername}</p>
          </div>
          <div className="flex gap-3">
            <Button
              variant="secondary"
              onClick={() => token && fetchDashboard(token)}
              disabled={loading}
              className="gap-2"
            >
              <RefreshCw className="h-4 w-4" />
              ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </Button>
            <Button variant="outline" onClick={logout} className="gap-2">
              <LogOut className="h-4 w-4" />
              ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
            </Button>
          </div>
        </div>

        {loading || !dashboard ? (
          <div className="pirate-card py-16 text-center text-foreground/70">
            <div className="mx-auto mb-4 h-12 w-12 animate-spin rounded-full border-4 border-primary border-t-transparent" />
            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î...
          </div>
        ) : (
          <Tabs defaultValue="participants" className="space-y-8">
            <TabsList className="grid w-full grid-cols-6 bg-white/80">
              <TabsTrigger value="participants" className="gap-2">
                <Users className="h-4 w-4" />
                ‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏∑‡∏≠
              </TabsTrigger>
              <TabsTrigger value="locations" className="gap-2">
                <MapPin className="h-4 w-4" />
                ‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡πá‡∏Å‡∏≠‡∏¥‡∏ô
              </TabsTrigger>
              <TabsTrigger value="subevents" className="gap-2">
                <Calendar className="h-4 w-4" />
                ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏¢‡πà‡∏≠‡∏¢
              </TabsTrigger>
              <TabsTrigger value="prizes" className="gap-2">
                <Gift className="h-4 w-4" />
                ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
              </TabsTrigger>
              <TabsTrigger value="herocards" className="gap-2">
                <Layers className="h-4 w-4" />
                Hero Cards
              </TabsTrigger>
              <TabsTrigger value="settings" className="gap-2">
                <Anchor className="h-4 w-4" />
                ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
              </TabsTrigger>
            </TabsList>

            <TabsContent value="participants" className="space-y-4">
              <div className="pirate-card px-6 py-8 space-y-6">
                <div className="flex flex-col gap-3">
                  <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                    <div>
                      <h2 className="text-2xl font-semibold text-primary">‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>
                      <p className="text-sm text-foreground/70">
                        ‡∏°‡∏µ‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏∑‡∏≠ {dashboard.participants.length} ‡∏Ñ‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏≠‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥
                        {searchQuery && ` (‡πÅ‡∏™‡∏î‡∏á ${filteredParticipants.length} ‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)`}
                      </p>
                    </div>
                    <Button variant="outline" className="gap-2" onClick={exportParticipants}>
                      <Download className="h-4 w-4" />
                      ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
                    </Button>
                  </div>

                  {/* ‚úÖ Search Box */}
                  <div className="flex items-center gap-3">
                    <div className="relative flex-1">
                      <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-foreground/50" />
                      <Input
                        type="text"
                        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ Username..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        className="pl-10"
                      />
                    </div>
                    {searchQuery && (
                      <Button 
                        variant="ghost" 
                        size="sm"
                        onClick={() => setSearchQuery("")}
                      >
                        ‡∏•‡πâ‡∏≤‡∏á
                      </Button>
                    )}
                  </div>
                </div>

                <div className="overflow-x-auto rounded-lg border border-primary/10">
                  <table className="w-full">
                    <thead className="bg-primary/5">
                      <tr>
                        <th className="p-3 text-left text-sm font-semibold">Username</th>
                        <th className="p-3 text-left text-sm font-semibold">‡∏ä‡∏∑‡πà‡∏≠</th>
                        <th className="p-3 text-left text-sm font-semibold">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
                        <th className="p-3 text-center text-sm font-semibold">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</th>
                        <th className="p-3 text-left text-sm font-semibold">‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤</th>
                        <th className="p-3 text-center text-sm font-semibold">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</th>
                        <th className="p-3 text-left text-sm font-semibold">‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</th>
                        <th className="p-3 text-left text-sm font-semibold">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredParticipants.length === 0 ? (
                        <tr>
                          <td colSpan={8} className="p-8 text-center text-foreground/60">
                            {searchQuery ? "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°"}
                          </td>
                        </tr>
                      ) : (
                        filteredParticipants.map((participant) => {
                          const spin = dashboard.spins.find((s) => s.participant_id === participant.id);
                          return (
                            <AdminParticipantManager
                              key={participant.id}
                              participant={participant}
                              spin={spin} // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
                              onUpdate={updateParticipant}
                              onDelete={deleteParticipant}
                              onAdjustPoints={adjustParticipantPoints}
                            />
                          );
                        })
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
            </TabsContent>

            <TabsContent value="locations" className="space-y-4">
              <div className="pirate-card px-6 py-8 space-y-6">
                <div className="flex items-center gap-3">
                  <div className="flex h-12 w-12 items-center justify-center rounded-full bg-secondary/15 text-secondary">
                    <MapPin className="h-6 w-6" />
                  </div>
                  <div>
                    <h2 className="text-2xl font-semibold text-primary">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡πá‡∏Å‡∏≠‡∏¥‡∏ô</h2>
                    <p className="text-sm text-foreground/70">
                      ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î
                    </p>
                  </div>
                </div>

                <div className="grid gap-6">
                  {dashboard.locations.map((location) => (
                    <AdminLocationManager
                      key={location.id}
                      location={location}
                      onSave={saveLocation}
                      onGenerateQR={regenerateQR}
                    />
                  ))}
                </div>
              </div>
            </TabsContent>

            <TabsContent value="subevents" className="space-y-4">
              <AdminSubEventManager
                locations={dashboard.locations}
                onSave={saveSubEvents}
              />
            </TabsContent>

            <TabsContent value="prizes" className="space-y-4">
              <div className="pirate-card px-6 py-8 space-y-6">
                <div className="flex items-center gap-3">
                  <div className="flex h-12 w-12 items-center justify-center rounded-full bg-accent/15 text-accent">
                    <Gift className="h-6 w-6" />
                  </div>
                  <div>
                    <h2 className="text-2xl font-semibold text-primary">‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</h2>
                    <p className="text-sm text-foreground/70">
                      ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ö‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                    </p>
                  </div>
                </div>

                <div className="grid gap-6">
                  {prizeDrafts.map((prize, index) => (
                    <div
                      key={prize.id}
                      className="rounded-2xl border border-rope/40 bg-white/70 px-6 py-6 shadow-sm"
                    >
                      <div className="grid gap-4 md:grid-cols-[2fr_1fr_1fr]">
                        <div className="space-y-2">
                          <Label htmlFor={`prize-name-${prize.id}`}>‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</Label>
                          <Input
                            id={`prize-name-${prize.id}`}
                            value={prize.name}
                            onChange={(event) =>
                              setPrizeDrafts((prev) => {
                                const updated = [...prev];
                                updated[index] = { ...updated[index], name: event.target.value };
                                return updated;
                              })
                            }
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor={`prize-weight-${prize.id}`}>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡πÇ‡∏≠‡∏Å‡∏≤‡∏™)</Label>
                          <Input
                            id={`prize-weight-${prize.id}`}
                            type="number"
                            value={prize.weight}
                            onChange={(event) =>
                              setPrizeDrafts((prev) => {
                                const updated = [...prev];
                                updated[index] = {
                                  ...updated[index],
                                  weight: Number(event.target.value),
                                };
                                return updated;
                              })
                            }
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor={`prize-stock-${prize.id}`}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</Label>
                          <Input
                            id={`prize-stock-${prize.id}`}
                            type="number"
                            min="0"
                            value={prize.stock}
                            onChange={(event) =>
                              setPrizeDrafts((prev) => {
                                const updated = [...prev];
                                updated[index] = {
                                  ...updated[index],
                                  stock: Number(event.target.value),
                                };
                                return updated;
                              })
                            }
                          />
                        </div>
                      </div>
                      <div className="mt-4 flex gap-3">
                        <Button
                          onClick={() => savePrize(prize)}
                          disabled={savingPrizeId === prize.id}
                          className="gap-2"
                        >
                          <Save className="h-4 w-4" />
                          {savingPrizeId === prize.id ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}
                        </Button>
                        <Button variant="outline" className="gap-2" onClick={() => deletePrize(prize.id)}>
                          <Trash2 className="h-4 w-4" />
                          ‡∏•‡∏ö
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="rounded-2xl border border-dashed border-rope/40 bg-white/60 px-6 py-6 shadow-inner">
                  <h3 className="text-lg font-semibold text-primary mb-4">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡∏°‡πà</h3>
                  <div className="grid gap-4 md:grid-cols-[2fr_1fr_1fr_auto]">
                    <Input
                      placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•"
                      value={newPrize.name}
                      onChange={(event) =>
                        setNewPrize((prev) => ({ ...prev, name: event.target.value }))
                      }
                    />
                    <Input
                      type="number"
                      min="1"
                      placeholder="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å"
                      value={newPrize.weight}
                      onChange={(event) =>
                        setNewPrize((prev) => ({ ...prev, weight: event.target.value }))
                      }
                    />
                    <Input
                      type="number"
                      min="0"
                      placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
                      value={newPrize.stock}
                      onChange={(event) =>
                        setNewPrize((prev) => ({ ...prev, stock: event.target.value }))
                      }
                    />
                    <Button className="gap-2" onClick={addPrize}>
                      <Plus className="h-4 w-4" />
                      ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
                    </Button>
                  </div>
                </div>
              </div>
            </TabsContent>

            <TabsContent value="herocards" className="space-y-4">
              <HeroCardsTab token={token} />
            </TabsContent>

            <TabsContent value="settings" className="space-y-4">
              <div className="pirate-card px-6 py-8 space-y-6">
                <h2 className="text-2xl font-semibold text-primary">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</h2>
                <div className="max-w-sm space-y-3">
                  <Label htmlFor="points-required">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠</Label>
                  <Input
                    id="points-required"
                    type="number"
                    min="0"
                    value={pointsRequired}
                    onChange={(event) => setPointsRequired(Number(event.target.value))}
                  />
                </div>
                <Button onClick={updateThreshold} disabled={updatingThreshold} className="gap-2">
                  <Save className="h-4 w-4" />
                  {updatingThreshold ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"}
                </Button>
              </div>
            </TabsContent>
          </Tabs>
        )}
      </div>
    </PirateBackdrop>
  );
};

export default AdminDashboard;







