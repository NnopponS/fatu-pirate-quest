import { FormEvent, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { useToast } from "@/hooks/use-toast";
import { signupParticipant } from "@/services/firebase";
import { Anchor, Check, Copy, Sparkles } from "lucide-react";
import { PirateBackdrop } from "@/components/PirateBackdrop";
import { PirateCharacter } from "@/components/PirateCharacter";

type Credentials = { username: string; password: string } | null;

const Signup = () => {
  const navigate = useNavigate();
  const { toast } = useToast();

  const [loading, setLoading] = useState(false);
  const [copiedField, setCopiedField] = useState<string | null>(null);
  const [credentials, setCredentials] = useState<Credentials>(null);
  const [autoGenerate, setAutoGenerate] = useState(false); // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô false = ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á (manual) ‡πÄ‡∏õ‡πá‡∏ô default
  const [manualUsername, setManualUsername] = useState("");
  const [manualPassword, setManualPassword] = useState("");
  const [isAdminSignup, setIsAdminSignup] = useState(false);
  const [adminSecretCode, setAdminSecretCode] = useState("");

  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    age: "",
    gradeLevel: "",
    school: "",
    program: "",
    phoneNumber: "", // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
  });

  const handleCopy = async (field: "username" | "password", value: string) => {
    if (!value) return;
    try {
      await navigator.clipboard.writeText(value);
      setCopiedField(field);
      setTimeout(() => setCopiedField(null), 1800);
      toast({
        title: "‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        description: field === "username" ? "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î" : "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î",
      });
    } catch (error) {
      toast({
        title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
        description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á",
        variant: "destructive",
      });
    }
  };

  const updateField = (field: keyof typeof formData) => (event: React.ChangeEvent<HTMLInputElement>) => {
    setFormData((prev) => ({ ...prev, [field]: event.target.value }));
  };

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setLoading(true);

    try {
      if (!autoGenerate) {
        if (!manualUsername.trim()) {
          throw new Error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
        }
        if (!manualPassword.trim()) {
          throw new Error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
        }
        if (manualPassword.trim().length < 6) {
          throw new Error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
        }
      }

      if (isAdminSignup && adminSecretCode !== "AdMin_FaTu-openhouse 2025") {
        throw new Error("‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Admin ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      }

      const result = await signupParticipant({
        firstName: formData.firstName,
        lastName: formData.lastName,
        age: formData.age ? parseInt(formData.age, 10) : null,
        gradeLevel: formData.gradeLevel || null,
        school: formData.school || null,
        program: formData.program || null,
        phoneNumber: formData.phoneNumber || null, // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
        username: autoGenerate ? null : manualUsername,
        password: autoGenerate ? null : manualPassword,
        autoGenerateCredentials: autoGenerate,
        isAdmin: isAdminSignup,
      });

      if (!result?.participantId || !result.username || !result.password) {
        throw new Error("‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
      }

      if (isAdminSignup) {
        localStorage.setItem("adminToken", result.participantId);
        localStorage.setItem("adminUsername", result.username);
        localStorage.setItem("authRole", "admin");
      } else {
        localStorage.setItem("participantId", result.participantId);
        localStorage.setItem("participantUsername", result.username);
        localStorage.setItem("authRole", "participant");
      }

      setCredentials({ username: result.username, password: result.password });

      // Check if there's a return URL (e.g., from checkin page)
      const returnUrl = sessionStorage.getItem("returnUrl");
      if (returnUrl && !isAdminSignup) {
        sessionStorage.removeItem("returnUrl");
        // Delay navigation to show credentials first
        setTimeout(() => navigate(returnUrl), 3000);
      }

      toast({
        title: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
      });
    } catch (error) {
      const message =
        error instanceof Error ? error.message : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
      toast({
        title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ",
        description: message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <PirateBackdrop>
      <PirateCharacter 
        messages={[
          "‡∏≠‡∏≤‡∏£‡πå‡∏£‡πå! ‡∏°‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏∑‡∏≠‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! üè¥‚Äç‚ò†Ô∏è",
          "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢! ‚öì",
          "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Username ‡πÅ‡∏•‡∏∞ Password! üìù",
          "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°! üíé",
        ]}
      />
      <div className="container mx-auto max-w-4xl px-4 py-16 space-y-10">
        <div className="flex flex-col items-center gap-4 text-center">
          <span className="pirate-highlight">
            <Sparkles className="h-4 w-4 text-accent" />
            ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢ FATU
          </span>
          <h1 className="pirate-heading md:text-5xl">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤</h1>
          <p className="pirate-subheading">
            ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ
          </p>
        </div>

        <form
          onSubmit={handleSubmit}
          className="pirate-card px-8 py-10 space-y-8 shadow-2xl shadow-primary/10"
        >
          <div className="space-y-2 text-center">
            <h2 className="text-3xl font-semibold text-primary">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£</h2>
            <p className="text-sm text-foreground/70">
              ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏ô‡∏á‡∏≤‡∏ô FATU Pirate Quest
            </p>
          </div>

          <div className="grid gap-6 md:grid-cols-2">
            <div className="space-y-2">
              <Label htmlFor="firstName">‡∏ä‡∏∑‡πà‡∏≠ *</Label>
              <Input
                id="firstName"
                required
                value={formData.firstName}
                onChange={updateField("firstName")}
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="lastName">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *</Label>
              <Input
                id="lastName"
                required
                value={formData.lastName}
                onChange={updateField("lastName")}
                placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="phoneNumber">
              ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå <span className="text-xs text-foreground/60"></span>
            </Label>
            <Input
              id="phoneNumber"
              type="tel"
              value={formData.phoneNumber}
              onChange={updateField("phoneNumber")}
              placeholder="‡πÄ‡∏ä‡πà‡∏ô 08x-xxx-xxxx"
            />
          </div>

          <div className="grid gap-6 md:grid-cols-2">
            <div className="space-y-2">
              <Label htmlFor="age">‡∏≠‡∏≤‡∏¢‡∏∏</Label>
              <Input
                id="age"
                type="number"
                min="5"
                max="100"
                value={formData.age}
                onChange={updateField("age")}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô 17"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="gradeLevel">‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ / ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</Label>
              <Input
                id="gradeLevel"
                value={formData.gradeLevel}
                onChange={updateField("gradeLevel")}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏°.6 / ‡∏õ‡∏µ 1"
              />
            </div>
          </div>

          <div className="grid gap-6 md:grid-cols-2">
            <div className="space-y-2">
              <Label htmlFor="school">‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤</Label>
              <Input
                id="school"
                value={formData.school}
                onChange={updateField("school")}
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="program">‡∏Ñ‡∏ì‡∏∞/‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</Label>
              <Input
                id="program"
                value={formData.program}
                onChange={updateField("program")}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏¥‡∏ó‡∏¢‡πå-‡∏Ñ‡∏ì‡∏¥‡∏ï, ‡∏®‡∏¥‡∏•‡∏õ‡πå-‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"
              />
            </div>
          </div>

          <div className="rounded-2xl border border-dashed border-rope/40 bg-white/70 p-6 space-y-4">
            <div className="flex items-center justify-between gap-4">
              <div>
                <h3 className="text-lg font-semibold text-primary">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h3>
                <p className="text-sm text-foreground/70">
                  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
                </p>
              </div>
              <div className="flex items-center gap-2">
                <Label htmlFor="auto-credentials" className="text-sm text-foreground/70">
                  ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                </Label>
                <Switch
                  id="auto-credentials"
                  checked={autoGenerate}
                  onCheckedChange={setAutoGenerate}
                />
              </div>
            </div>

            {!autoGenerate && (
              <div className="grid gap-4 sm:grid-cols-2">
                <div className="space-y-2">
                  <Label htmlFor="manual-username">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ *</Label>
                  <Input
                    id="manual-username"
                    value={manualUsername}
                    onChange={(event) => setManualUsername(event.target.value)}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô pirate2024"
                    autoComplete="new-username"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="manual-password">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô *</Label>
                  <Input
                    id="manual-password"
                    type="password"
                    value={manualPassword}
                    onChange={(event) => setManualPassword(event.target.value)}
                    placeholder="‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"
                    autoComplete="new-password"
                  />
                </div>
              </div>
            )}
          </div>

          <div className="rounded-2xl border border-dashed border-primary/40 bg-primary/5 p-6 space-y-4">
            <div className="flex items-center justify-between gap-4">
              <div>
                <h3 className="text-lg font-semibold text-primary">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô Admin</h3>
                <p className="text-sm text-foreground/70">
                  ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                </p>
              </div>
              <div className="flex items-center gap-2">
                <Label htmlFor="admin-signup" className="text-sm text-foreground/70">
                  ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô Admin
                </Label>
                <Switch
                  id="admin-signup"
                  checked={isAdminSignup}
                  onCheckedChange={setIsAdminSignup}
                />
              </div>
            </div>

            {isAdminSignup && (
              <div className="space-y-2">
                <Label htmlFor="admin-secret">‡∏£‡∏´‡∏±‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin *</Label>
                <Input
                  id="admin-secret"
                  type="password"
                  value={adminSecretCode}
                  onChange={(event) => setAdminSecretCode(event.target.value)}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©"
                  autoComplete="off"
                />
                <p className="text-xs text-foreground/60">
                  ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Admin
                </p>
              </div>
            )}
          </div>

          <Button type="submit" className="w-full !mt-4" disabled={loading}>
            {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ..." : "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"}
          </Button>
        </form>

        {/* ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ credentials popup ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î */}
        {credentials && (
          <div className="pirate-card px-6 py-8 space-y-4 animate-in fade-in slide-in-from-bottom-4 duration-500">
            <div className="flex items-center gap-3">
              <div className="flex h-12 w-12 items-center justify-center rounded-full bg-accent/15 text-accent">
                <Check className="h-6 w-6" />
              </div>
              <div>
                <h2 className="text-2xl font-semibold text-accent">üéâ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h2>
                <p className="text-sm text-foreground/70">
                  ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏î‡∏µ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                </p>
              </div>
            </div>

            <div className="grid gap-4 sm:grid-cols-2">
              <div className="space-y-2">
                <Label>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</Label>
                <div className="flex items-center gap-2">
                  <Input readOnly value={credentials.username} className="bg-white" />
                  <Button
                    type="button"
                    variant="outline"
                    size="icon"
                    onClick={() => handleCopy("username", credentials.username)}
                    aria-label="‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                  >
                    {copiedField === "username" ? (
                      <Check className="h-5 w-5 text-primary" />
                    ) : (
                      <Copy className="h-5 w-5" />
                    )}
                  </Button>
                </div>
              </div>
              <div className="space-y-2">
                <Label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</Label>
                <div className="flex items-center gap-2">
                  <Input readOnly type="text" value={credentials.password} className="bg-white" />
                  <Button
                    type="button"
                    variant="outline"
                    size="icon"
                    onClick={() => handleCopy("password", credentials.password)}
                    aria-label="‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                  >
                    {copiedField === "password" ? (
                      <Check className="h-5 w-5 text-primary" />
                    ) : (
                      <Copy className="h-5 w-5" />
                    )}
                  </Button>
                </div>
              </div>
            </div>

            <div className="rounded-lg border-2 border-accent/30 bg-accent/10 p-4">
              <p className="text-sm font-semibold text-accent text-center">
                ‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
              </p>
            </div>

            <div className="flex flex-col gap-3 sm:flex-row">
              <Button className="flex-1" onClick={() => navigate("/map")}>
                ‡πÑ‡∏õ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à
              </Button>
              <Button className="flex-1" variant="outline" onClick={() => navigate("/login")}>
                ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
              </Button>
            </div>
          </div>
        )}
      </div>
    </PirateBackdrop>
  );
};

export default Signup;
