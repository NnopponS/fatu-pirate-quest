import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { X, Send, Loader2, MessageCircle, AlertCircle } from "lucide-react";
import { chatWithPirate } from "@/services/gemini";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/contexts/AuthContext";

interface Message {
  role: "user" | "assistant";
  content: string;
  timestamp: Date;
}

interface PirateChatbotProps {
  isOpen: boolean;
  onClose: () => void;
}

export const PirateChatbot = ({ isOpen, onClose }: PirateChatbotProps) => {
  const { toast } = useToast();
  const { user } = useAuth();
  const [messages, setMessages] = useState<Message[]>([
    {
      role: "assistant",
      content: "‡∏≠‡∏≤‡∏Æ‡∏≠‡∏¢! ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠ ‡∏Å‡∏±‡∏õ‡∏ï‡∏±‡∏ô‡∏ü‡∏≤‡∏ï‡∏π ‡πÇ‡∏à‡∏£‡∏™‡∏•‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏í‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏â‡∏•‡∏≤‡∏î! üè¥‚Äç‚ò†Ô∏è\n\n‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏à‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢ FATU Treasure Quest ‡∏ô‡∏µ‡πâ! ‡πÄ‡∏à‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:\n\n‚öì ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\nüó∫Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà\nüíé ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•\nüéì ‡∏Ñ‡∏ì‡∏∞‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°‡∏ò.\nüé® ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n\n‡∏≠‡∏¢‡πà‡∏≤‡∏≠‡∏≤‡∏¢ ‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡πÄ‡∏•‡∏¢! ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏î‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á! üí™‚öì",
      timestamp: new Date()
    }
  ]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [userContext, setUserContext] = useState<any>(null);
  const [aiReady, setAiReady] = useState<boolean | null>(null);
  const [showAiStatus, setShowAiStatus] = useState(true);
  const scrollRef = useRef<HTMLDivElement>(null);

  // Load user context when chatbot opens
  useEffect(() => {
    if (isOpen && user) {
      loadUserContext();
    }
  }, [isOpen, user]);

  // OpenRouter AI is always ready (no loading needed)
  useEffect(() => {
    if (isOpen) {
      setAiReady(true);
      setShowAiStatus(true);
      // Hide success message after 3 seconds
      setTimeout(() => setShowAiStatus(false), 3000);
    }
  }, [isOpen]);

  // Auto scroll to bottom when new messages arrive
  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [messages]);

  const loadUserContext = async () => {
    if (!user) return;

    try {
      const { getMapData } = await import("@/services/firebase");
      const { firebaseDb } = await import("@/integrations/firebase/database");
      
      const [mapData, spinData, participant] = await Promise.all([
        getMapData(user.id),
        firebaseDb.get<any>(`spins/${user.id}`),
        firebaseDb.get<any>(`participants/${user.id}`)
      ]);

      const locationNames = mapData.locations.map((loc: any) => loc.name);
      const checkedInLocationNames = mapData.locations
        .filter((loc: any) => mapData.checkins.includes(loc.id))
        .map((loc: any) => loc.name);

      const userName = participant 
        ? `${participant.first_name || ""} ${participant.last_name || ""}`.trim() 
        : undefined;

      setUserContext({
        name: userName,
        points: mapData.points,
        pointsRequired: mapData.pointsRequired,
        checkedInLocations: checkedInLocationNames,
        totalLocations: mapData.locations.length,
        completedSubEvents: mapData.subEventCheckins?.length || 0,
        hasSpun: Boolean(spinData),
        prize: spinData?.prize
      });
    } catch (error) {
      console.error("Failed to load user context:", error);
    }
  };

  const handleSend = async () => {
    if (!input.trim() || loading) return;

    const userMessage: Message = {
      role: "user",
      content: input.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput("");
    setLoading(true);

    try {
      console.log('[Chatbot] Sending message to AI...', { input: input.trim(), hasContext: !!userContext });
      const response = await chatWithPirate(input.trim(), userContext);
      console.log('[Chatbot] Received response from AI');
      
      const assistantMessage: Message = {
        role: "assistant",
        content: response,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error("[Chatbot] Chat error:", error);
      
      const errorMessage = error instanceof Error ? error.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ";
      
      // Show detailed error in toast
      toast({
        title: "‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ",
        description: errorMessage,
        variant: "destructive"
      });

      // Show user-friendly error in chat
      let chatErrorMessage = "‡πÇ‡∏ó‡∏©‡∏ó‡∏µ‡πÄ‡∏à‡πâ‡∏≤... ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ";
      
      if (errorMessage.includes("‡πÇ‡∏´‡∏•‡∏î") || errorMessage.includes("load")) {
        chatErrorMessage = "‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏¢‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö üîÑ";
      } else if (errorMessage.includes("timeout") || errorMessage.includes("‡∏Ñ‡∏¥‡∏î‡∏ô‡∏≤‡∏ô")) {
        chatErrorMessage = "‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏î‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á‡∏î‡∏π ü§î";
      } else if (errorMessage.includes("network") || errorMessage.includes("‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï")) {
        chatErrorMessage = "‡∏Ç‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏î‡∏π‡∏ô‡∏∞ üì∂";
      }
      
      const errorMsg: Message = {
        role: "assistant",
        content: chatErrorMessage,
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, errorMsg]);
    } finally {
      setLoading(false);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  if (!isOpen) {
    return null;
  }

  return (
    <div className="fixed bottom-6 right-6 w-96 max-w-[calc(100vw-3rem)] h-[600px] max-h-[80vh] flex flex-col bg-white rounded-2xl shadow-2xl border-4 border-primary z-50 animate-in slide-in-from-bottom-8 fade-in">
      {/* Header */}
      <div className="flex items-center justify-between p-4 bg-gradient-to-r from-primary to-secondary text-white rounded-t-xl">
        <div className="flex items-center gap-2">
          <div className="text-3xl">üè¥‚Äç‚ò†Ô∏è</div>
          <div>
            <h3 className="font-bold text-lg">‡πÇ‡∏à‡∏£‡∏™‡∏•‡∏±‡∏î FATU</h3>
            <p className="text-xs text-white/80">‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤</p>
          </div>
        </div>
        <Button
          variant="ghost"
          size="icon"
          onClick={onClose}
          className="text-white hover:bg-white/20"
        >
          <X className="h-5 w-5" />
        </Button>
      </div>

      {/* Messages */}
      <ScrollArea className="flex-1 p-4" ref={scrollRef}>
        <div className="space-y-4">
          {messages.map((msg, idx) => (
            <div
              key={idx}
              className={`flex ${msg.role === "user" ? "justify-end" : "justify-start"} animate-in fade-in slide-in-from-bottom-2`}
            >
              <div
                className={`max-w-[80%] rounded-2xl px-4 py-3 ${
                  msg.role === "user"
                    ? "bg-primary text-white rounded-br-none"
                    : "bg-amber-50 text-foreground border-2 border-amber-200 rounded-bl-none"
                }`}
              >
                {msg.role === "assistant" && (
                  <div className="text-xl mb-1">üè¥‚Äç‚ò†Ô∏è</div>
                )}
                <p className="text-sm whitespace-pre-wrap">{msg.content}</p>
                <p className={`text-xs mt-1 ${msg.role === "user" ? "text-white/70" : "text-foreground/50"}`}>
                  {msg.timestamp.toLocaleTimeString("th-TH", {
                    hour: "2-digit",
                    minute: "2-digit"
                  })}
                </p>
              </div>
            </div>
          ))}
          
          {loading && (
            <div className="flex justify-start animate-in fade-in">
              <div className="bg-amber-50 border-2 border-amber-200 rounded-2xl rounded-bl-none px-4 py-3">
                <div className="flex items-center gap-2">
                  <Loader2 className="h-4 w-4 animate-spin text-primary" />
                  <span className="text-sm text-foreground/70">‡∏Ç‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î...</span>
                </div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>

      {/* Input */}
      <div className="p-4 border-t bg-gray-50 rounded-b-xl">
        {/* AI Status Indicator */}
        {showAiStatus && aiReady === null && (
          <div className="mb-2 p-2 bg-blue-50 border border-blue-200 rounded-lg animate-in fade-in">
            <div className="flex items-center gap-2 text-sm text-blue-700">
              <Loader2 className="h-4 w-4 animate-spin" />
              <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö AI...</span>
            </div>
          </div>
        )}
        {showAiStatus && aiReady === false && (
          <div className="mb-2 p-3 bg-red-50 border-2 border-red-300 rounded-lg animate-in fade-in">
            <div className="text-sm text-red-700">
              <p className="font-semibold flex items-center gap-2">
                <AlertCircle className="h-4 w-4" />
                ‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
              </p>
              <p className="text-xs mt-1">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</p>
            </div>
          </div>
        )}
        {showAiStatus && aiReady === true && (
          <div className="mb-2 p-2 bg-green-50 border border-green-200 rounded-lg animate-in fade-in">
            <div className="flex items-center gap-2 text-sm text-green-700">
              <span>‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß!</span>
            </div>
          </div>
        )}
        
        <div className="flex gap-2">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={aiReady === false ? "‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°..." : "‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡∏™‡∏¥... (‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á? ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á?)"}
            disabled={loading || aiReady === false}
            className="flex-1"
          />
          <Button
            onClick={handleSend}
            disabled={!input.trim() || loading || aiReady === false}
            className="pirate-button"
          >
            {loading ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Send className="h-4 w-4" />
            )}
          </Button>
        </div>
        <div className="text-xs text-center text-foreground/50 mt-2 space-y-1">
          <p>‚ö†Ô∏è AI ‡∏≠‡∏≤‡∏à‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
          <p className="text-[10px]">üí° ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°: "‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?" "‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á?" "‡∏Ñ‡∏ì‡∏∞‡∏°‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏∞‡πÑ‡∏£?"</p>
        </div>
      </div>
    </div>
  );
};

